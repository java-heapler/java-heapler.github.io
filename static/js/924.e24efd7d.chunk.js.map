{"version":3,"file":"static/js/924.e24efd7d.chunk.js","mappings":"wLAuEA,QApEA,WACE,MAAOA,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAGrCC,GAAyBC,EAAAA,EAAAA,cAAY,KACzC,IAAIC,GAAU,EACd,MAAO,KACAA,IACHC,OAAOC,uBAAsB,KACvBD,OAAOE,YAAc,IACvBP,GAAa,GAEbA,GAAa,GAEfI,GAAU,CAAK,IAEjBA,GAAU,EACZ,CACD,GACA,KAEHI,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAmBP,IAEzB,OADAG,OAAOK,iBAAiB,SAAUD,EAAkB,CAAEE,SAAS,IACxD,IAAMN,OAAOO,oBAAoB,SAAUH,EAAiB,GAClE,CAACP,IAEJ,MAAMW,EAAcA,KAClBR,OAAOS,SAAS,CACdC,IAAK,EACLC,SAAU,WAIZC,YAAW,KACT,MAAMC,EAAiBC,SAASC,cAAc,uEAC1CF,GACFA,EAAeG,OACjB,GACC,IAAI,EAUT,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGzB,IACC0B,EAAAA,EAAAA,MAAA,UACEC,UAAS,eAAAC,OAAiB5B,EAAY,UAAY,IAClD6B,QAASf,EACTgB,WAbgBC,IACR,UAAVA,EAAEC,KAA6B,MAAVD,EAAEC,MACzBD,EAAEE,iBACFnB,IACF,EAUM,aAAW,cACXoB,SAAS,IACTC,KAAK,SAAQV,SAAA,EAEbF,EAAAA,EAAAA,KAACa,EAAAA,IAAS,CAAC,cAAY,UACvBb,EAAAA,EAAAA,KAAA,QAAMI,UAAU,UAASF,SAAC,oBAKpC,C","sources":["components/BackToTop.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { FaArrowUp } from 'react-icons/fa';\n\nfunction BackToTop() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  // Throttle scroll event for better performance\n  const throttledScrollHandler = useCallback(() => {\n    let ticking = false;\n    return () => {\n      if (!ticking) {\n        window.requestAnimationFrame(() => {\n          if (window.pageYOffset > 300) {\n            setIsVisible(true);\n          } else {\n            setIsVisible(false);\n          }\n          ticking = false;\n        });\n        ticking = true;\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    const toggleVisibility = throttledScrollHandler();\n    window.addEventListener('scroll', toggleVisibility, { passive: true });\n    return () => window.removeEventListener('scroll', toggleVisibility);\n  }, [throttledScrollHandler]);\n\n  const scrollToTop = () => {\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth',\n    });\n    \n    // Focus on the first focusable element at the top\n    setTimeout(() => {\n      const firstFocusable = document.querySelector('a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n      if (firstFocusable) {\n        firstFocusable.focus();\n      }\n    }, 500);\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter' || e.key === ' ') {\n      e.preventDefault();\n      scrollToTop();\n    }\n  };\n\n  return (\n    <>\n      {isVisible && (\n        <button\n          className={`back-to-top ${isVisible ? 'visible' : ''}`}\n          onClick={scrollToTop}\n          onKeyPress={handleKeyPress}\n          aria-label=\"Back to top\"\n          tabIndex=\"0\"\n          role=\"button\"\n        >\n          <FaArrowUp aria-hidden=\"true\" />\n          <span className=\"sr-only\">Back to top</span>\n        </button>\n      )}\n    </>\n  );\n}\n\nexport default BackToTop; "],"names":["isVisible","setIsVisible","useState","throttledScrollHandler","useCallback","ticking","window","requestAnimationFrame","pageYOffset","useEffect","toggleVisibility","addEventListener","passive","removeEventListener","scrollToTop","scrollTo","top","behavior","setTimeout","firstFocusable","document","querySelector","focus","_jsx","_Fragment","children","_jsxs","className","concat","onClick","onKeyPress","e","key","preventDefault","tabIndex","role","FaArrowUp"],"sourceRoot":""}