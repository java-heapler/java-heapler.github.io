{"version":3,"file":"static/js/520.16531afa.chunk.js","mappings":"+KAEA,MAAMA,GAAeC,EAAAA,EAAAA,iBCwCrB,EAvCkBC,IAAqB,IAApB,KAAEC,EAAI,KAAEC,GAAMF,EAC/B,MAAM,OAAEG,GDsBcC,MACtB,MAAMC,GAAUC,EAAAA,EAAAA,YAAWR,GAC3B,QAAgBS,IAAZF,EACF,MAAM,IAAIG,MAAM,gDAElB,OAAOH,CAAO,EC3BKD,GAGbK,EAAWR,EAAKS,QAAQ,OAAQ,IAGhCC,EAAgB,GAAAC,OAAMC,aAAsB,kBAAAD,OAAiBH,EAASC,QAAQ,cAAe,gBAAe,cAC5GI,EAAiB,GAAAF,OAAMC,aAAsB,kBAAAD,OAAiBX,GAWpE,OATAc,EAAAA,EAAAA,YAAU,KACRC,QAAQC,IAAI,aAADL,OAAcV,EAAI,KAAK,CAChCC,SACAQ,mBACAG,oBACAI,YAAaf,EAASQ,EAAmBG,GACzC,GACD,CAACX,EAAQQ,EAAkBG,EAAmBZ,KAG/CiB,EAAAA,EAAAA,KAAA,OACEC,IAAKjB,EAASQ,EAAmBG,EACjCO,IAAG,GAAAT,OAAKV,EAAI,SACZoB,UAAU,aACVC,QAAQ,OACRC,MAAM,KACNC,OAAO,KACPC,QAAUC,IACRX,QAAQY,MAAM,wBAADhB,OAAyBe,EAAEE,OAAOT,MAE3CjB,GAAUwB,EAAEE,OAAOT,MAAQN,IAC7BE,QAAQC,IAAI,uCAADL,OAAwCV,IACnDyB,EAAEE,OAAOT,IAAMN,EACjB,GAEF,C","sources":["context/ThemeContext.js","components/SkillIcon.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return savedTheme === 'dark';\n  });\n\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', isDark ? 'dark' : 'light');\n    localStorage.setItem('theme', isDark ? 'dark' : 'light');\n  }, [isDark]);\n\n  const toggleTheme = () => {\n    setIsDark(!isDark);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}; ","import React, { useEffect } from 'react';\nimport { useTheme } from '../context/ThemeContext';\n\nconst SkillIcon = ({ icon, name }) => {\n  const { isDark } = useTheme();\n\n  // Get the base name without extension\n  const baseName = icon.replace('.svg', '');\n  \n  // Construct paths for both light and dark mode\n  const darkModeIconPath = `${process.env.PUBLIC_URL}/assets/icons/${baseName.replace('scikitlearn', 'scikit-learn')}-light.svg`;\n  const lightModeIconPath = `${process.env.PUBLIC_URL}/assets/icons/${icon}`;\n\n  useEffect(() => {\n    console.log(`SkillIcon ${name}:`, {\n      isDark,\n      darkModeIconPath,\n      lightModeIconPath,\n      currentPath: isDark ? darkModeIconPath : lightModeIconPath\n    });\n  }, [isDark, darkModeIconPath, lightModeIconPath, name]);\n\n  return (\n    <img \n      src={isDark ? darkModeIconPath : lightModeIconPath}\n      alt={`${name} icon`}\n      className=\"skill-icon\"\n      loading=\"lazy\"\n      width=\"32\"\n      height=\"32\"\n      onError={(e) => {\n        console.error(`Failed to load icon: ${e.target.src}`);\n        // If dark mode icon fails to load, fallback to light mode icon\n        if (isDark && e.target.src !== lightModeIconPath) {\n          console.log(`Falling back to light mode icon for ${name}`);\n          e.target.src = lightModeIconPath;\n        }\n      }}\n    />\n  );\n};\n\nexport default SkillIcon; "],"names":["ThemeContext","createContext","_ref","icon","name","isDark","useTheme","context","useContext","undefined","Error","baseName","replace","darkModeIconPath","concat","process","lightModeIconPath","useEffect","console","log","currentPath","_jsx","src","alt","className","loading","width","height","onError","e","error","target"],"sourceRoot":""}