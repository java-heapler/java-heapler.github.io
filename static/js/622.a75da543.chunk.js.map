{"version":3,"file":"static/js/622.a75da543.chunk.js","mappings":"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","sources":["components/Contact.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { trackError } from '../utils/errorTracking';\nimport { logEvent } from '../utils/analytics';\nimport '../styles/Contact.css';\n\nfunction Contact() {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    message: ''\n  });\n  const [formErrors, setFormErrors] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [error, setError] = useState(null);\n\n  const validateForm = () => {\n    const errors = {};\n    \n    // Name validation\n    if (!formData.name.trim()) {\n      errors.name = 'Name is required';\n    } else if (formData.name.trim().length < 2) {\n      errors.name = 'Name must be at least 2 characters';\n    }\n    \n    // Email validation\n    if (!formData.email.trim()) {\n      errors.email = 'Email is required';\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      errors.email = 'Please enter a valid email address';\n    }\n    \n    // Message validation\n    if (!formData.message.trim()) {\n      errors.message = 'Message is required';\n    } else if (formData.message.trim().length < 10) {\n      errors.message = 'Message must be at least 10 characters';\n    }\n    \n    setFormErrors(errors);\n    return Object.keys(errors).length === 0;\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    \n    // Validate form before submission\n    if (!validateForm()) {\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      // Using Formspree for form submission\n      const response = await fetch('https://formspree.io/f/xbjnkdvw', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n\n      if (!response.ok) {\n        throw new Error('Form submission failed');\n      }\n\n      // Track successful submission\n      logEvent('Contact', 'Form Submitted', 'Contact Form');\n      setIsSubmitted(true);\n    } catch (err) {\n      trackError(err, 'ContactForm');\n      setError('There was a problem submitting your form. Please try again or email me directly.');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n    \n    // Clear error for this field when user starts typing\n    if (formErrors[name]) {\n      setFormErrors({\n        ...formErrors,\n        [name]: null\n      });\n    }\n  };\n\n  const handleBlur = (e) => {\n    const { name } = e.target;\n    \n    // Validate individual field on blur\n    const errors = { ...formErrors };\n    \n    if (name === 'name') {\n      if (!formData.name.trim()) {\n        errors.name = 'Name is required';\n      } else if (formData.name.trim().length < 2) {\n        errors.name = 'Name must be at least 2 characters';\n      } else {\n        delete errors.name;\n      }\n    }\n    \n    if (name === 'email') {\n      if (!formData.email.trim()) {\n        errors.email = 'Email is required';\n      } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n        errors.email = 'Please enter a valid email address';\n      } else {\n        delete errors.email;\n      }\n    }\n    \n    if (name === 'message') {\n      if (!formData.message.trim()) {\n        errors.message = 'Message is required';\n      } else if (formData.message.trim().length < 10) {\n        errors.message = 'Message must be at least 10 characters';\n      } else {\n        delete errors.message;\n      }\n    }\n    \n    setFormErrors(errors);\n  };\n\n  return (\n    <section className=\"contact-section\" id=\"contact\">\n      <h2>Contact Me</h2>\n      {isSubmitted ? (\n        <div className=\"success-message\">\n          <p>Thank you for your message! I'll get back to you soon.</p>\n          <button \n            onClick={() => {\n              setIsSubmitted(false);\n              setFormData({ name: '', email: '', message: '' });\n              setFormErrors({});\n            }}\n            className=\"send-another-btn\"\n          >\n            Send Another Message\n          </button>\n        </div>\n      ) : (\n        <form onSubmit={handleSubmit} noValidate>\n          <div className={`form-group ${formErrors.name ? 'has-error' : ''}`}>\n            <label htmlFor=\"name\">Your name:</label>\n            <input\n              type=\"text\"\n              id=\"name\"\n              name=\"name\"\n              value={formData.name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              required\n              disabled={isSubmitting}\n              aria-invalid={!!formErrors.name}\n              aria-describedby={formErrors.name ? \"name-error\" : undefined}\n            />\n            {formErrors.name && (\n              <div className=\"field-error\" id=\"name-error\">{formErrors.name}</div>\n            )}\n          </div>\n          <div className={`form-group ${formErrors.email ? 'has-error' : ''}`}>\n            <label htmlFor=\"email\">Your email:</label>\n            <input\n              type=\"email\"\n              id=\"email\"\n              name=\"email\"\n              value={formData.email}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              required\n              disabled={isSubmitting}\n              aria-invalid={!!formErrors.email}\n              aria-describedby={formErrors.email ? \"email-error\" : undefined}\n            />\n            {formErrors.email && (\n              <div className=\"field-error\" id=\"email-error\">{formErrors.email}</div>\n            )}\n          </div>\n          <div className={`form-group ${formErrors.message ? 'has-error' : ''}`}>\n            <label htmlFor=\"message\">Message:</label>\n            <textarea\n              id=\"message\"\n              name=\"message\"\n              value={formData.message}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              required\n              disabled={isSubmitting}\n              aria-invalid={!!formErrors.message}\n              aria-describedby={formErrors.message ? \"message-error\" : undefined}\n            />\n            {formErrors.message && (\n              <div className=\"field-error\" id=\"message-error\">{formErrors.message}</div>\n            )}\n          </div>\n          {error && <div className=\"error-message\" role=\"alert\">{error}</div>}\n          <button \n            type=\"submit\" \n            disabled={isSubmitting}\n            className={isSubmitting ? 'submitting' : ''}\n          >\n            {isSubmitting ? 'Sending...' : 'Send Message'}\n          </button>\n        </form>\n      )}\n      <div className=\"direct-contact\">\n        <p>Or reach me directly at: <a href=\"mailto:jheupler@berkeley.edu\">jheupler@berkeley.edu</a></p>\n      </div>\n    </section>\n  );\n}\n\nexport default Contact;\n"],"names":["formData","setFormData","useState","name","email","message","formErrors","setFormErrors","isSubmitting","setIsSubmitting","isSubmitted","setIsSubmitted","error","setError","handleChange","e","value","target","prevState","_objectSpread","handleBlur","errors","trim","length","test","_jsxs","className","id","children","_jsx","onClick","onSubmit","async","preventDefault","validateForm","Object","keys","fetch","method","headers","body","JSON","stringify","ok","Error","logEvent","err","trackError","noValidate","concat","htmlFor","type","onChange","onBlur","required","disabled","undefined","role","href"],"sourceRoot":""}