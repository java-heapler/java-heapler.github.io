{"version":3,"file":"static/js/44.e7c30eca.chunk.js","mappings":"sLAMA,MAAMA,EACS,GADTA,EAEW,IAFXA,EAGW,IAHXA,EAIC,GAJDA,EAKC,GALDA,EAMkB,OANlBA,EAOQ,OAPRA,EAQoB,OARpBA,EASe,OATfA,EAUe,OAVfA,EAWmB,OAmPzB,EAhP2BC,KACzB,MAAOC,EAAUC,IAAeC,EAAAA,EAAAA,WAAS,IAClCC,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,YAGrCG,EAAiBC,GACjBA,GAAS,GAAW,UACpBA,GAAS,GAAW,UACjB,UAIHC,EAAoB,CACxBC,OAAQ,CAAEC,QAAS,EAAGC,EAAG,IACzBC,QAAS,CACPF,QAAS,EACTC,EAAG,EACHE,WAAY,CACVC,SAAU,GACVC,gBAAiB,MAKjBC,EAAe,CACnBP,OAAQ,CAAEC,QAAS,EAAGO,GAAI,IAC1BL,QAAS,CAAEF,QAAS,EAAGO,EAAG,IAGtBC,EAAyBA,CAACX,EAAOY,KACrCC,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,gBACVC,SAAUR,EAAaS,SAAA,EAEvBL,EAAAA,EAAAA,MAAA,OAAKM,MAAM,KAAKC,OAAO,KAAKC,QAAQ,cAAaH,SAAA,EAC/CI,EAAAA,EAAAA,KAAA,UACEC,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,OACLC,OAAO,UACPC,YAAY,OAEdN,EAAAA,EAAAA,KAAA,UACEC,GAAG,KACHC,GAAG,KACHC,EAAE,KACFC,KAAK,OACLC,OAAQ5B,EAAcC,GACtB4B,YAAY,IACZC,gBAAe,GAAAC,OAAK,EAAIC,KAAKC,GAAK,IAClCC,iBAAgB,GAAAH,OAAK,EAAIC,KAAKC,GAAK,IAAM,EAAIhC,EAAM,MACnDkC,cAAc,QACdC,UAAU,uBAEZb,EAAAA,EAAAA,KAAA,QACEZ,EAAE,KACFN,EAAE,KACFgC,WAAW,QACXC,SAAS,KACTC,WAAW,SACXZ,KAAM3B,EAAcC,GAAOkB,SAE1BlB,QAGLsB,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,SAAEN,OAkHnC,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAS,uBAAAc,OAAyBpC,EAAW,WAAa,IAC1D6C,QAAS,CAAEpC,QAAS,GACpBqC,QAAS,CAAErC,QAAS,GACpBG,WAAY,CAAEC,SAAU,IAAMW,SAAA,EAE9BL,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,iBACVyB,QAASA,IAAM9C,GAAaD,GAAUwB,SAAA,EAEtCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,yBACJI,EAAAA,EAAAA,KAACR,EAAAA,EAAOC,IAAG,CACTC,UAAU,cACVwB,QAAS,CAAEE,OAAQhD,EAAW,IAAM,GACpCY,WAAY,CAAEC,SAAU,IAAMW,SAC/B,cAKFxB,IACCmB,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,kBACVuB,QAAS,CAAEnB,OAAQ,EAAGjB,QAAS,GAC/BqC,QAAS,CAAEpB,OAAQ,OAAQjB,QAAS,GACpCG,WAAY,CAAEC,SAAU,IAAMW,SAAA,EAE9BL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcE,SAAA,EAC3BI,EAAAA,EAAAA,KAAA,UACEN,UAAyB,aAAdnB,EAA2B,SAAW,GACjD4C,QAASA,IAAM3C,EAAa,YAAYoB,SACzC,cAGDI,EAAAA,EAAAA,KAAA,UACEN,UAAyB,WAAdnB,EAAyB,SAAW,GAC/C4C,QAASA,IAAM3C,EAAa,UAAUoB,SACvC,kBAGDI,EAAAA,EAAAA,KAAA,UACEN,UAAyB,kBAAdnB,EAAgC,SAAW,GACtD4C,QAASA,IAAM3C,EAAa,iBAAiBoB,SAC9C,sBAKHL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaE,SAAA,CACX,aAAdrB,IA/JTgB,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,mBACVC,SAAUhB,EACVsC,QAAQ,SACRC,QAAQ,UAAStB,SAAA,EAEjBL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaE,SAAA,CACzBP,EAAuBnB,EAA8B,eACrDmB,EAAuBnB,EAAgC,iBACvDmB,EAAuBnB,EAAgC,kBACvDmB,EAAuBnB,EAAsB,OAC7CmB,EAAuBnB,EAAsB,WAGhDqB,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,eACVC,SAAUR,EAAaS,SAAA,CACxB,kBACgB,IAAIyB,MAAOC,2BA8IP,WAAd/C,IAxITgB,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,iBACVC,SAAUhB,EACVsC,QAAQ,SACRC,QAAQ,UAAStB,SAAA,EAEjBL,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CAACC,UAAU,gBAAgBC,SAAUR,EAAaS,SAAA,EAC3DL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYE,SAAA,EACzBI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,SAAC,4BAC7BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,SAAE1B,QAEjCqB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYE,SAAA,EACzBI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,SAAC,iBAC7BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,SAAE1B,QAEjCqB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYE,SAAA,EACzBI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,SAAC,8BAC7BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,SAAE1B,QAEjCqB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYE,SAAA,EACzBI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,SAAC,yBAC7BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,SAAE1B,QAEjCqB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYE,SAAA,EACzBI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,SAAC,yBAC7BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,SAAE1B,QAEjCqB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,aAAYE,SAAA,EACzBI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,SAAC,6BAC7BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,SAAE1B,WAInCqB,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CAACC,UAAU,sBAAsBC,SAAUR,EAAaS,SAAA,EACjEI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,iCACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,oOAsGgB,kBAAdrB,IA5FTgB,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,wBACVC,SAAUhB,EACVsC,QAAQ,SACRC,QAAQ,UAAStB,SAAA,EAEjBL,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CAACC,UAAU,oBAAoBC,SAAUR,EAAaS,SAAA,EAC/DI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,2BACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,0HAMLL,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CAACC,UAAU,oBAAoBC,SAAUR,EAAaS,SAAA,EAC/DI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,2CACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,sIAMLL,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CAACC,UAAU,oBAAoBC,SAAUR,EAAaS,SAAA,EAC/DI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,mCACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,8HAMLL,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CAACC,UAAU,oBAAoBC,SAAUR,EAAaS,SAAA,EAC/DI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,kCACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,mIAgEM,EC1PX2B,GAAkBC,EAAAA,EAAAA,OAAK,IAEpB,IAAIC,SAAQC,GACjBC,YAAW,IACTD,EAAQ,6BACR,SAKAE,GAAkBJ,EAAAA,EAAAA,OAAK,IACpB,IAAIC,SAAQC,GACjBC,YAAW,IACTD,EAAQ,+BACR,UAKAG,GAAkBL,EAAAA,EAAAA,OAAK,IACpB,IAAIC,SAAQC,GACjBC,YAAW,IACTD,EAAQ,+BACR,SAMAI,EAAkBA,KACtBvC,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBE,SAAA,EAC/BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,qBACfH,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBE,SAAA,EAC/BI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,mBACfM,EAAAA,EAAAA,KAAA,OAAKN,UAAU,mBACfM,EAAAA,EAAAA,KAAA,OAAKN,UAAU,sBAEjBM,EAAAA,EAAAA,KAAA,OAAKN,UAAU,uBAyInB,EArI0BqC,KACxB,MAAOC,EAAkBC,IAAuB3D,EAAAA,EAAAA,UAAS,IACnD4D,EACM,QADNA,EAEG,QAFHA,EAGK,MAGLC,EAAmBC,IACnBJ,EAAiBK,SAASD,GAC5BH,EAAoBD,EAAiBM,QAAOC,GAAOA,IAAQH,KAE3DH,EAAoB,IAAID,EAAkBI,GAC5C,EAGF,OACE7C,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,sBACVuB,QAAS,CAAEpC,QAAS,GACpBqC,QAAS,CAAErC,QAAS,GACpBG,WAAY,CAAEC,SAAU,IAAMW,SAAA,EAE9BL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaE,SAAA,EAC1BI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,kCACJI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,UAC1BL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,eAAcE,SAAA,EAC3BL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaE,SAAA,EAC1BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,aAAYE,SAAC,sBAC7BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,aAAYE,SAAEsC,QAEhC3C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaE,SAAA,EAC1BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,aAAYE,SAAC,mBAC7BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,uBAAsBE,SAAEsC,QAE1C3C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,cAAaE,SAAA,EAC1BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,aAAYE,SAAC,gBAC7BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,uBAAsBE,SAAEsC,gBAMhD3C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,uBAAsBE,SAAA,EACnCI,EAAAA,EAAAA,KAAA,KAAGN,UAAU,mBAAkBE,SAAC,uJAKhCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCL,EAAAA,EAAAA,MAAA,UACEG,UAAS,oBAAAc,OAAsBwB,EAAiBK,SAAS,GAAK,SAAW,IACzElB,QAASA,IAAMgB,EAAgB,GAAGvC,SAAA,CACnC,aAECI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,iBAAgBE,SAAC,eAGnCL,EAAAA,EAAAA,MAAA,UACEG,UAAS,oBAAAc,OAAsBwB,EAAiBK,SAAS,GAAK,SAAW,IACzElB,QAASA,IAAMgB,EAAgB,GAAGvC,SAAA,CACnC,aAECI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,iBAAgBE,SAAC,cAGnCL,EAAAA,EAAAA,MAAA,UACEG,UAAS,oBAAAc,OAAsBwB,EAAiBK,SAAS,GAAK,SAAW,IACzElB,QAASA,IAAMgB,EAAgB,GAAGvC,SAAA,CACnC,aAECI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,iBAAgBE,SAAC,kBAIrCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,CAC/BoC,EAAiBK,SAAS,KACzB9C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,eACJI,EAAAA,EAAAA,KAACwC,EAAAA,SAAQ,CAACC,UAAUzC,EAAAA,EAAAA,KAAC8B,EAAe,IAAIlC,UACtCI,EAAAA,EAAAA,KAACuB,EAAe,SAKrBS,EAAiBK,SAAS,KACzB9C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,eACJI,EAAAA,EAAAA,KAACwC,EAAAA,SAAQ,CAACC,UAAUzC,EAAAA,EAAAA,KAAC8B,EAAe,IAAIlC,UACtCI,EAAAA,EAAAA,KAAC4B,EAAe,SAKrBI,EAAiBK,SAAS,KACzB9C,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,eACJI,EAAAA,EAAAA,KAACwC,EAAAA,SAAQ,CAACC,UAAUzC,EAAAA,EAAAA,KAAC8B,EAAe,IAAIlC,UACtCI,EAAAA,EAAAA,KAAC6B,EAAe,SAKO,IAA5BG,EAAiBU,SAChB1C,EAAAA,EAAAA,KAAA,OAAKN,UAAU,cAAaE,UAC1BI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,iFAMXI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,eAAcE,UAC3BL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,gBAAeE,SAAA,EAC5BI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,8BACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,uFAGHL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EACEI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,2DACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,mEACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,8DACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,iEAENI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,uKAMI,E,4FCGjB,EA7JuB+C,IAShB,IATiB,IACtBC,EAAG,IACHC,EAAG,MACHhD,EAAK,OACLC,EAAM,UACNJ,EAAY,GAAE,MACdoD,EAAQ,QAAO,SACfC,GAAW,GAEZJ,EADIK,GAAIC,EAAAA,EAAAA,GAAAN,EAAAO,GAEP,MAAOC,EAAUC,IAAe9E,EAAAA,EAAAA,WAAS,IAClC+E,EAAWC,IAAgBhF,EAAAA,EAAAA,UAASyE,IACpCQ,EAAqBC,IAA0BlF,EAAAA,EAAAA,UAAS,MACzDmF,GAAWC,EAAAA,EAAAA,QAAO,OAGxBC,EAAAA,EAAAA,YAAU,KAER,GAAI,eAAgBC,WAAaA,UAAUC,WAAWC,cAAe,CACnEN,EAAuBI,UAAUC,WAAWC,eAG5C,MAAMC,EAAsBA,KAC1BP,EAAuBI,UAAUC,WAAWC,cAAc,EAI5D,OADAF,UAAUC,WAAWG,iBAAiB,SAAUD,GACzC,KACLH,UAAUC,WAAWI,oBAAoB,SAAUF,EAAoB,CAE3E,IACC,KAGHJ,EAAAA,EAAAA,YAAU,KACR,IAAKZ,GAAYU,EAASS,QAAS,CAEjC,MAAMC,EAAaV,EAASS,QAEtBE,EAAW,IAAIC,sBAClBC,IACKA,EAAQ,GAAGC,iBACbjB,GAAa,GACbc,EAASI,aACX,GAEF,CACEC,WAAY,QACZC,UAAW,MAMf,OAFAN,EAASO,QAAQR,GAEV,KAELC,EAASI,YAAY,CAEzB,IACC,CAACzB,IAGJ,MAaM6B,EAAgBC,IACpB,MAAMC,EAAQD,EAAKE,MAAM,KACzB,OAAOD,EAAMpC,OAAS,EAAIoC,EAAME,MAAMC,cAAgB,EAAE,EASpDC,EALeL,KACnB,MAAMM,EAAYP,EAAaC,GAC/B,OAAOM,EAAYN,EAAKO,MAAM,IAAKD,EAAUzC,OAAS,IAAMmC,CAAI,EAGjDQ,CAAYzC,GACvB0C,EAAoBV,EAAahC,IAAQ,MACzC2C,EA1BkBC,MACtB,OAAQjC,GACN,IAAK,UACL,IAAK,KACH,MAAO,QACT,IAAK,KACH,MAAO,QACT,QACE,MAAO,QACX,EAiBmBiC,GAGfC,EAAaC,GACV,CAAC,EAAG,EAAG,GACXC,KAAIC,GAAG,GAAApF,OAAO0E,EAAQ,KAAA1E,OAAIkF,GAAMlF,OAAG+E,EAAY,SAAA/E,OAAQoF,EAAG,KAAApF,OAAIoF,EAAG,OACjEC,KAAK,MAIJC,EAAmB,CACvBC,cAAc,GAADvF,OAAMV,EAASD,EAAS,IAAG,MAG1C,OACEN,EAAAA,EAAAA,MAAA,OAAAyG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEtG,UAAS,6BAAAc,OAA+B2C,EAAW,SAAW,GAAE,KAAA3C,OAAId,GACpEuG,IAAKxC,EACLyC,MAAO,CAAEC,YAAY,GAAD3F,OAAKX,EAAK,OAAAW,OAAMV,KAChCkD,GAAI,IAAApD,SAAA,EAGNyD,IACArD,EAAAA,EAAAA,KAAA,OAAKN,UAAU,oBAAoBwG,MAAOJ,EAAiBlG,UACzDI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,sBAKlB2D,IACC9D,EAAAA,EAAAA,MAAA,WAAAK,SAAA,EAEEI,EAAAA,EAAAA,KAAA,UACEoG,KAAK,aACLC,OAAQZ,EAAU,QAClB3C,MAAOA,KAIT9C,EAAAA,EAAAA,KAAA,UACEoG,KAAK,aACLC,OAAQZ,EAAU,QAClB3C,MAAOA,KAIT9C,EAAAA,EAAAA,KAAA,OACE4C,IAAG,GAAApC,OAAK0E,EAAQ,KAAA1E,OAAI8E,GAAiB9E,OAAG+E,GACxC1C,IAAKA,EACLhD,MAAOA,EACPC,OAAQA,EACRwG,QAASvD,EAAW,QAAU,OAC9BwD,OAAQA,IAAMnD,GAAY,GAC1B1D,UAAS,mBAAAc,OAAqB2C,EAAW,UAAY,UAM1DqD,KAMG,ECdV,EA1JiCC,KAC/B,MAAOlI,EAAWC,IAAgBF,EAAAA,EAAAA,UAAS,WAE3C,OACE0B,EAAAA,EAAAA,KAACR,EAAAA,EAAOkH,QAAO,CACbhH,UAAU,sBACVuB,QAAS,CAAEpC,QAAS,GACpBqC,QAAS,CAAErC,QAAS,GACpBG,WAAY,CAAEC,SAAU,IAAMW,UAE9BL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCL,EAAAA,EAAAA,MAACC,EAAAA,EAAOC,IAAG,CACTC,UAAU,iBACVuB,QAAS,CAAEnC,GAAI,IACfoC,QAAS,CAAEpC,EAAG,GACdE,WAAY,CAAEC,SAAU,IAAMW,SAAA,EAE9BI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,+BACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,qLAKHL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCL,EAAAA,EAAAA,MAAA,UACEG,UAAyB,YAAdnB,EAA0B,SAAW,GAChD4C,QAASA,IAAM3C,EAAa,WAAWoB,SAAA,EAEvCI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,WAAUE,SAAC,iBAAS,0BAGtCL,EAAAA,EAAAA,MAAA,UACEG,UAAyB,mBAAdnB,EAAiC,SAAW,GACvD4C,QAASA,IAAM3C,EAAa,kBAAkBoB,SAAA,EAE9CI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,WAAUE,SAAC,WAAQ,qBAGrCL,EAAAA,EAAAA,MAAA,UACEG,UAAyB,uBAAdnB,EAAqC,SAAW,GAC3D4C,QAASA,IAAM3C,EAAa,sBAAsBoB,SAAA,EAElDI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,WAAUE,SAAC,uBAAU,+BAM3CL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,uBAAsBE,SAAA,CACpB,YAAdrB,IAA2ByB,EAAAA,EAAAA,KAAC7B,EAAkB,IAChC,mBAAdI,IAAkCyB,EAAAA,EAAAA,KAAC+B,EAAiB,IACtC,uBAAdxD,IACCgB,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0BAAyBE,SAAA,EACtCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,mBAAkBE,SAAA,EAC/BI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,6BACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,0EAGHL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EACEL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EAAII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,yBAA6B,8CACzCL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EAAII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,0BAA8B,yCAC1CL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EAAII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,2BAA+B,2CAC3CL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EAAII,EAAAA,EAAAA,KAAA,UAAAJ,SAAQ,kBAAsB,uDAItCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,0BAAyBE,SAAA,EACtCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,0BACJL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,qBAAoBE,SAAA,EACjCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,aAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,kBAEjCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,WAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,eAEjCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,cAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,cAEjCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,cAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,wBAGnCI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBE,UAC9BI,EAAAA,EAAAA,KAAA,OACE4C,IAAI,uCACJC,IAAI,iCACJhD,MAAM,MACNC,OAAO,MACPwG,QAAQ,eAKd/G,EAAAA,EAAAA,MAAA,OAAKG,UAAU,oBAAmBE,SAAA,EAChCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,uBACJL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,qBAAoBE,SAAA,EACjCL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,aAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,yBAAwBE,SAAC,uBAE3CL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,WAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,yBAAwBE,SAAC,6BAE3CL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,cAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,yBAAwBE,SAAC,2BAE3CL,EAAAA,EAAAA,MAAA,OAAKG,UAAU,SAAQE,SAAA,EACrBI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,eAAcE,SAAC,cAC/BI,EAAAA,EAAAA,KAAA,QAAMN,UAAU,yBAAwBE,SAAC,yBAG7CI,EAAAA,EAAAA,KAAA,OAAKN,UAAU,kBAAiBE,UAC9BI,EAAAA,EAAAA,KAAC2G,EAAc,CACb/D,IAAI,qCACJC,IAAI,+BACJhD,MAAO,IACPC,OAAQ,IACRiD,UAAU,aAMlBxD,EAAAA,EAAAA,MAAA,OAAKG,UAAU,2BAA0BE,SAAA,EACvCI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,iCACJI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,qGAGHL,EAAAA,EAAAA,MAAA,MAAAK,SAAA,EACEI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,4DACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,oEACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,oEACJI,EAAAA,EAAAA,KAAA,MAAAJ,SAAI,oDAENI,EAAAA,EAAAA,KAAA,KAAAJ,SAAG,mLASE,C","sources":["components/PerformanceMetrics.js","components/CodeSplittingDemo.js","components/OptimizedImage.js","components/PerformanceOptimizations.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport '../styles/PerformanceMetrics.css';\n\n// Static Lighthouse scores - in a real app, you could fetch these from an API\n// that runs Lighthouse tests on your deployed site\nconst lighthouseScores = {\n  performance: 94,\n  accessibility: 100,\n  bestPractices: 100,\n  seo: 97,\n  pwa: 92,\n  firstContentfulPaint: '0.8s',\n  speedIndex: '1.2s',\n  largestContentfulPaint: '1.5s',\n  timeToInteractive: '1.8s',\n  totalBlockingTime: '80ms',\n  cumulativeLayoutShift: '0.01'\n};\n\nconst PerformanceMetrics = () => {\n  const [expanded, setExpanded] = useState(false);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  // Helper to determine color based on score\n  const getScoreColor = (score) => {\n    if (score >= 90) return '#0cce6b'; // Green\n    if (score >= 50) return '#ffa400'; // Orange\n    return '#ff4e42'; // Red\n  };\n\n  // Animation variants\n  const containerVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { \n      opacity: 1, \n      y: 0,\n      transition: { \n        duration: 0.5,\n        staggerChildren: 0.1\n      }\n    }\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, x: -10 },\n    visible: { opacity: 1, x: 0 }\n  };\n\n  const renderCircularProgress = (score, label) => (\n    <motion.div \n      className=\"metric-circle\" \n      variants={itemVariants}\n    >\n      <svg width=\"80\" height=\"80\" viewBox=\"0 0 100 100\">\n        <circle \n          cx=\"50\" \n          cy=\"50\" \n          r=\"45\" \n          fill=\"none\" \n          stroke=\"#e6e6e6\" \n          strokeWidth=\"8\" \n        />\n        <circle \n          cx=\"50\" \n          cy=\"50\" \n          r=\"45\" \n          fill=\"none\" \n          stroke={getScoreColor(score)} \n          strokeWidth=\"8\" \n          strokeDasharray={`${2 * Math.PI * 45}`} \n          strokeDashoffset={`${2 * Math.PI * 45 * (1 - score/100)}`} \n          strokeLinecap=\"round\"\n          transform=\"rotate(-90 50 50)\"\n        />\n        <text \n          x=\"50\" \n          y=\"55\" \n          fontFamily=\"Arial\" \n          fontSize=\"22\" \n          textAnchor=\"middle\" \n          fill={getScoreColor(score)}\n        >\n          {score}\n        </text>\n      </svg>\n      <div className=\"metric-label\">{label}</div>\n    </motion.div>\n  );\n\n  const renderOverviewTab = () => (\n    <motion.div \n      className=\"metrics-overview\"\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      <div className=\"metrics-row\">\n        {renderCircularProgress(lighthouseScores.performance, 'Performance')}\n        {renderCircularProgress(lighthouseScores.accessibility, 'Accessibility')}\n        {renderCircularProgress(lighthouseScores.bestPractices, 'Best Practices')}\n        {renderCircularProgress(lighthouseScores.seo, 'SEO')}\n        {renderCircularProgress(lighthouseScores.pwa, 'PWA')}\n      </div>\n      \n      <motion.div \n        className=\"last-updated\"\n        variants={itemVariants}\n      >\n        Last updated: {new Date().toLocaleDateString()}\n      </motion.div>\n    </motion.div>\n  );\n\n  const renderDetailTab = () => (\n    <motion.div \n      className=\"metrics-detail\"\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      <motion.div className=\"metrics-table\" variants={itemVariants}>\n        <div className=\"metric-row\">\n          <div className=\"metric-name\">First Contentful Paint</div>\n          <div className=\"metric-value\">{lighthouseScores.firstContentfulPaint}</div>\n        </div>\n        <div className=\"metric-row\">\n          <div className=\"metric-name\">Speed Index</div>\n          <div className=\"metric-value\">{lighthouseScores.speedIndex}</div>\n        </div>\n        <div className=\"metric-row\">\n          <div className=\"metric-name\">Largest Contentful Paint</div>\n          <div className=\"metric-value\">{lighthouseScores.largestContentfulPaint}</div>\n        </div>\n        <div className=\"metric-row\">\n          <div className=\"metric-name\">Time to Interactive</div>\n          <div className=\"metric-value\">{lighthouseScores.timeToInteractive}</div>\n        </div>\n        <div className=\"metric-row\">\n          <div className=\"metric-name\">Total Blocking Time</div>\n          <div className=\"metric-value\">{lighthouseScores.totalBlockingTime}</div>\n        </div>\n        <div className=\"metric-row\">\n          <div className=\"metric-name\">Cumulative Layout Shift</div>\n          <div className=\"metric-value\">{lighthouseScores.cumulativeLayoutShift}</div>\n        </div>\n      </motion.div>\n      \n      <motion.div className=\"metrics-explanation\" variants={itemVariants}>\n        <h4>What do these metrics mean?</h4>\n        <p>\n          These Core Web Vitals measure user experience in terms of loading performance, \n          interactivity, and visual stability. The scores above demonstrate this \n          portfolio's commitment to delivering a fast, responsive experience.\n        </p>\n      </motion.div>\n    </motion.div>\n  );\n\n  const renderOptimizationsTab = () => (\n    <motion.div \n      className=\"metrics-optimizations\"\n      variants={containerVariants}\n      initial=\"hidden\"\n      animate=\"visible\"\n    >\n      <motion.div className=\"optimization-item\" variants={itemVariants}>\n        <h4>⚡ Code Splitting</h4>\n        <p>\n          This portfolio uses dynamic imports to load components only when needed, \n          reducing the initial bundle size by 60%.\n        </p>\n      </motion.div>\n      \n      <motion.div className=\"optimization-item\" variants={itemVariants}>\n        <h4>🖼️ Image Optimization</h4>\n        <p>\n          Images use modern formats (WebP, AVIF) with fallbacks, lazy loading, and \n          responsive sizing, saving over 70% in image payload.\n        </p>\n      </motion.div>\n      \n      <motion.div className=\"optimization-item\" variants={itemVariants}>\n        <h4>📱 Adaptive Loading</h4>\n        <p>\n          Content adapts to network conditions and device capabilities, \n          loading higher quality resources only when appropriate.\n        </p>\n      </motion.div>\n      \n      <motion.div className=\"optimization-item\" variants={itemVariants}>\n        <h4>📶 Offline Support</h4>\n        <p>\n          Service workers cache critical resources, enabling the site to work \n          offline and load instantly on repeat visits.\n        </p>\n      </motion.div>\n    </motion.div>\n  );\n\n  return (\n    <motion.div \n      className={`performance-metrics ${expanded ? 'expanded' : ''}`}\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <motion.div \n        className=\"metrics-header\"\n        onClick={() => setExpanded(!expanded)}\n      >\n        <h3>Performance Metrics</h3>\n        <motion.div \n          className=\"expand-icon\"\n          animate={{ rotate: expanded ? 180 : 0 }}\n          transition={{ duration: 0.3 }}\n        >\n          ▼\n        </motion.div>\n      </motion.div>\n\n      {expanded && (\n        <motion.div \n          className=\"metrics-content\"\n          initial={{ height: 0, opacity: 0 }}\n          animate={{ height: 'auto', opacity: 1 }}\n          transition={{ duration: 0.3 }}\n        >\n          <div className=\"metrics-tabs\">\n            <button \n              className={activeTab === 'overview' ? 'active' : ''} \n              onClick={() => setActiveTab('overview')}\n            >\n              Overview\n            </button>\n            <button \n              className={activeTab === 'detail' ? 'active' : ''} \n              onClick={() => setActiveTab('detail')}\n            >\n              Core Metrics\n            </button>\n            <button \n              className={activeTab === 'optimizations' ? 'active' : ''} \n              onClick={() => setActiveTab('optimizations')}\n            >\n              Optimizations\n            </button>\n          </div>\n\n          <div className=\"tab-content\">\n            {activeTab === 'overview' && renderOverviewTab()}\n            {activeTab === 'detail' && renderDetailTab()}\n            {activeTab === 'optimizations' && renderOptimizationsTab()}\n          </div>\n        </motion.div>\n      )}\n    </motion.div>\n  );\n};\n\nexport default PerformanceMetrics; ","import React, { useState, lazy, Suspense } from 'react';\nimport { motion } from 'framer-motion';\nimport '../styles/CodeSplittingDemo.css';\n\n// Simulated \"heavy\" components that would be costly to load\n// In a real scenario, these would be actual components with significant size\nconst HeavyComponent1 = lazy(() => {\n  // Simulate network delay to demonstrate the loading state\n  return new Promise(resolve => \n    setTimeout(() => \n      resolve(import('./codeSplitComponents/HeavyComponent1')), \n      1000\n    )\n  );\n});\n\nconst HeavyComponent2 = lazy(() => {\n  return new Promise(resolve => \n    setTimeout(() => \n      resolve(import('./codeSplitComponents/HeavyComponent2')), \n      1500\n    )\n  );\n});\n\nconst HeavyComponent3 = lazy(() => {\n  return new Promise(resolve => \n    setTimeout(() => \n      resolve(import('./codeSplitComponents/HeavyComponent3')), \n      2000\n    )\n  );\n});\n\n// Fallback loading component with UI skeleton\nconst LoadingSkeleton = () => (\n  <div className=\"loading-skeleton\">\n    <div className=\"skeleton-header\"></div>\n    <div className=\"skeleton-content\">\n      <div className=\"skeleton-line\"></div>\n      <div className=\"skeleton-line\"></div>\n      <div className=\"skeleton-line\"></div>\n    </div>\n    <div className=\"skeleton-footer\"></div>\n  </div>\n);\n\nconst CodeSplittingDemo = () => {\n  const [loadedComponents, setLoadedComponents] = useState([]);\n  const bundleData = {\n    original: '524KB',\n    split: '142KB',\n    savings: '73%'\n  };\n\n  const toggleComponent = (id) => {\n    if (loadedComponents.includes(id)) {\n      setLoadedComponents(loadedComponents.filter(cid => cid !== id));\n    } else {\n      setLoadedComponents([...loadedComponents, id]);\n    }\n  };\n\n  return (\n    <motion.div \n      className=\"code-splitting-demo\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.3 }}\n    >\n      <div className=\"demo-header\">\n        <h3>Code Splitting Demonstration</h3>\n        <div className=\"bundle-info\">\n          <div className=\"bundle-stats\">\n            <div className=\"bundle-stat\">\n              <span className=\"stat-label\">Original Bundle:</span>\n              <span className=\"stat-value\">{bundleData.original}</span>\n            </div>\n            <div className=\"bundle-stat\">\n              <span className=\"stat-label\">Initial Load:</span>\n              <span className=\"stat-value highlight\">{bundleData.split}</span>\n            </div>\n            <div className=\"bundle-stat\">\n              <span className=\"stat-label\">Reduction:</span>\n              <span className=\"stat-value reduction\">{bundleData.savings}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"components-container\">\n        <p className=\"demo-instruction\">\n          Click on each feature below to dynamically load only the code you need.\n          This demonstrates how code-splitting reduces initial load time for users.\n        </p>\n        \n        <div className=\"component-buttons\">\n          <button \n            className={`component-button ${loadedComponents.includes(1) ? 'active' : ''}`}\n            onClick={() => toggleComponent(1)}\n          >\n            Feature 1\n            <span className=\"component-size\">+128KB</span>\n          </button>\n          \n          <button \n            className={`component-button ${loadedComponents.includes(2) ? 'active' : ''}`}\n            onClick={() => toggleComponent(2)}\n          >\n            Feature 2\n            <span className=\"component-size\">+96KB</span>\n          </button>\n          \n          <button \n            className={`component-button ${loadedComponents.includes(3) ? 'active' : ''}`}\n            onClick={() => toggleComponent(3)}\n          >\n            Feature 3\n            <span className=\"component-size\">+158KB</span>\n          </button>\n        </div>\n        \n        <div className=\"loaded-components\">\n          {loadedComponents.includes(1) && (\n            <div className=\"component-wrapper\">\n              <h4>Feature 1</h4>\n              <Suspense fallback={<LoadingSkeleton />}>\n                <HeavyComponent1 />\n              </Suspense>\n            </div>\n          )}\n          \n          {loadedComponents.includes(2) && (\n            <div className=\"component-wrapper\">\n              <h4>Feature 2</h4>\n              <Suspense fallback={<LoadingSkeleton />}>\n                <HeavyComponent2 />\n              </Suspense>\n            </div>\n          )}\n          \n          {loadedComponents.includes(3) && (\n            <div className=\"component-wrapper\">\n              <h4>Feature 3</h4>\n              <Suspense fallback={<LoadingSkeleton />}>\n                <HeavyComponent3 />\n              </Suspense>\n            </div>\n          )}\n          \n          {loadedComponents.length === 0 && (\n            <div className=\"empty-state\">\n              <p>No features loaded yet. Click on a feature button above to load it.</p>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      <div className=\"network-info\">\n        <div className=\"network-panel\">\n          <h4>How Code Splitting Works</h4>\n          <p>\n            Instead of loading your entire application at once, code splitting allows you to:\n          </p>\n          <ul>\n            <li>Load only the critical code needed for initial render</li>\n            <li>Defer loading of non-critical components until they're needed</li>\n            <li>Reduce initial load time and improve Time to Interactive</li>\n            <li>Dynamically import components based on user interactions</li>\n          </ul>\n          <p>\n            This portfolio uses React.lazy() and Suspense with dynamic imports to implement code splitting,\n            ensuring a fast initial load even as the application grows.\n          </p>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default CodeSplittingDemo; ","import React, { useState, useEffect, useRef } from 'react';\nimport '../styles/OptimizedImage.css';\n\n/**\n * OptimizedImage Component\n * \n * A high-performance image component with:\n * - Responsive sizing\n * - Modern format (WebP/AVIF) with fallbacks\n * - Progressive loading with blur-up effect\n * - Lazy loading using Intersection Observer\n * - Network-aware quality selection\n * \n * @param {Object} props\n * @param {string} props.src - Base image source without extension\n * @param {string} props.alt - Alt text for accessibility\n * @param {number} props.width - Natural width of the image\n * @param {number} props.height - Natural height of the image\n * @param {string} props.className - Additional CSS classes\n * @param {string} props.sizes - Responsive sizes attribute\n * @param {string} props.priority - If \"true\", loads immediately without lazy loading\n */\nconst OptimizedImage = ({ \n  src, \n  alt, \n  width, \n  height, \n  className = '', \n  sizes = '100vw', \n  priority = false,\n  ...rest \n}) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [isVisible, setIsVisible] = useState(priority);\n  const [effectiveConnection, setEffectiveConnection] = useState('4g');\n  const imageRef = useRef(null);\n\n  // Detect network conditions\n  useEffect(() => {\n    // Check if the Network Information API is available\n    if ('connection' in navigator && navigator.connection.effectiveType) {\n      setEffectiveConnection(navigator.connection.effectiveType);\n      \n      // Update when the network information changes\n      const handleNetworkChange = () => {\n        setEffectiveConnection(navigator.connection.effectiveType);\n      };\n      \n      navigator.connection.addEventListener('change', handleNetworkChange);\n      return () => {\n        navigator.connection.removeEventListener('change', handleNetworkChange);\n      };\n    }\n  }, []);\n\n  // Setup intersection observer for lazy loading\n  useEffect(() => {\n    if (!priority && imageRef.current) {\n      // Store a reference to the current element to use in the cleanup function\n      const currentRef = imageRef.current;\n      \n      const observer = new IntersectionObserver(\n        (entries) => {\n          if (entries[0].isIntersecting) {\n            setIsVisible(true);\n            observer.disconnect();\n          }\n        },\n        {\n          rootMargin: '200px',\n          threshold: 0.01\n        }\n      );\n      \n      observer.observe(currentRef);\n      \n      return () => {\n        // Use the stored reference instead of imageRef.current\n        observer.disconnect();\n      };\n    }\n  }, [priority]);\n\n  // Determine image quality based on network conditions\n  const getQualityParam = () => {\n    switch (effectiveConnection) {\n      case 'slow-2g':\n      case '2g':\n        return '?q=60'; // Lower quality for slow connections\n      case '3g':\n        return '?q=75';\n      default:\n        return '?q=90'; // High quality for fast connections\n    }\n  };\n\n  // Get file extension from path\n  const getExtension = (path) => {\n    const parts = path.split('.');\n    return parts.length > 1 ? parts.pop().toLowerCase() : '';\n  };\n\n  // Determine base path without extension\n  const getBasePath = (path) => {\n    const extension = getExtension(path);\n    return extension ? path.slice(0, -(extension.length + 1)) : path;\n  };\n\n  const basePath = getBasePath(src);\n  const originalExtension = getExtension(src) || 'jpg';\n  const qualityParam = getQualityParam();\n\n  // Create srcset for different device pixel ratios\n  const getSrcSet = (format) => {\n    return [1, 2, 3]\n      .map(dpr => `${basePath}.${format}${qualityParam}&dpr=${dpr} ${dpr}x`)\n      .join(', ');\n  };\n\n  // Placeholder with aspect ratio\n  const placeholderStyle = {\n    paddingBottom: `${(height / width) * 100}%`\n  };\n\n  return (\n    <div \n      className={`optimized-image-container ${isLoaded ? 'loaded' : ''} ${className}`}\n      ref={imageRef}\n      style={{ aspectRatio: `${width} / ${height}` }}\n      {...rest}\n    >\n      {/* Show loading skeleton until image is visible */}\n      {!isVisible && (\n        <div className=\"image-placeholder\" style={placeholderStyle}>\n          <div className=\"loading-shimmer\"></div>\n        </div>\n      )}\n      \n      {/* Only load the actual image when it becomes visible */}\n      {isVisible && (\n        <picture>\n          {/* AVIF format for browsers that support it */}\n          <source\n            type=\"image/avif\"\n            srcSet={getSrcSet('avif')}\n            sizes={sizes}\n          />\n          \n          {/* WebP format as first fallback */}\n          <source\n            type=\"image/webp\"\n            srcSet={getSrcSet('webp')}\n            sizes={sizes}\n          />\n          \n          {/* Original format (JPEG/PNG) as final fallback */}\n          <img\n            src={`${basePath}.${originalExtension}${qualityParam}`}\n            alt={alt}\n            width={width}\n            height={height}\n            loading={priority ? 'eager' : 'lazy'}\n            onLoad={() => setIsLoaded(true)}\n            className={`optimized-image ${isLoaded ? 'visible' : ''}`}\n          />\n        </picture>\n      )}\n      \n      {/* Optional debug information - visible only in development */}\n      {process.env.NODE_ENV === 'development' && (\n        <div className=\"image-debug\">\n          <span className=\"debug-network\">{effectiveConnection}</span>\n          <span className=\"debug-loaded\">{isLoaded ? '✓' : '...'}</span>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default OptimizedImage; ","import React, { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport '../styles/PerformanceOptimizations.css';\nimport PerformanceMetrics from './PerformanceMetrics';\nimport CodeSplittingDemo from './CodeSplittingDemo';\nimport OptimizedImage from './OptimizedImage';\n\nconst PerformanceOptimizations = () => {\n  const [activeTab, setActiveTab] = useState('metrics');\n  \n  return (\n    <motion.section \n      className=\"performance-section\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n    >\n      <div className=\"section-container\">\n        <motion.div\n          className=\"section-header\"\n          initial={{ y: -20 }}\n          animate={{ y: 0 }}\n          transition={{ duration: 0.5 }}\n        >\n          <h2>Performance Optimizations</h2>\n          <p>\n            This portfolio demonstrates several performance optimizations that enhance user experience.\n            These techniques showcase modern web development practices that I apply in my work.\n          </p>\n          \n          <div className=\"optimization-tabs\">\n            <button \n              className={activeTab === 'metrics' ? 'active' : ''}\n              onClick={() => setActiveTab('metrics')}\n            >\n              <span className=\"tab-icon\">📊</span>\n              Performance Metrics\n            </button>\n            <button \n              className={activeTab === 'code-splitting' ? 'active' : ''}\n              onClick={() => setActiveTab('code-splitting')}\n            >\n              <span className=\"tab-icon\">⚡</span>\n              Code Splitting\n            </button>\n            <button \n              className={activeTab === 'image-optimization' ? 'active' : ''}\n              onClick={() => setActiveTab('image-optimization')}\n            >\n              <span className=\"tab-icon\">🖼️</span>\n              Image Optimization\n            </button>\n          </div>\n        </motion.div>\n        \n        <div className=\"optimization-content\">\n          {activeTab === 'metrics' && <PerformanceMetrics />}\n          {activeTab === 'code-splitting' && <CodeSplittingDemo />}\n          {activeTab === 'image-optimization' && (\n            <div className=\"image-optimization-demo\">\n              <div className=\"demo-description\">\n                <h3>Optimized Image Loading</h3>\n                <p>\n                  The images below demonstrate advanced image optimization techniques:\n                </p>\n                <ul>\n                  <li><strong>Format Optimization:</strong> Serving AVIF or WebP with JPG fallback</li>\n                  <li><strong>Resolution Switching:</strong> Different sizes based on viewport</li>\n                  <li><strong>Network-Aware Loading:</strong> Quality adjusts to connection speed</li>\n                  <li><strong>Lazy Loading:</strong> Images only load when they enter viewport</li>\n                </ul>\n              </div>\n              \n              <div className=\"optimization-comparison\">\n                <div className=\"comparison-column\">\n                  <h4>Without Optimization</h4>\n                  <div className=\"comparison-metrics\">\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Format:</span>\n                      <span className=\"metric-value\">JPEG only</span>\n                    </div>\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Size:</span>\n                      <span className=\"metric-value\">843 KB</span>\n                    </div>\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Loading:</span>\n                      <span className=\"metric-value\">Eager</span>\n                    </div>\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Quality:</span>\n                      <span className=\"metric-value\">Fixed (100%)</span>\n                    </div>\n                  </div>\n                  <div className=\"image-container\">\n                    <img \n                      src=\"/assets/sample/unoptimized-image.jpg\" \n                      alt=\"Unoptimized mountain landscape\" \n                      width=\"600\"\n                      height=\"400\"\n                      loading=\"lazy\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"comparison-column\">\n                  <h4>With Optimization</h4>\n                  <div className=\"comparison-metrics\">\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Format:</span>\n                      <span className=\"metric-value highlight\">AVIF/WebP/JPEG</span>\n                    </div>\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Size:</span>\n                      <span className=\"metric-value highlight\">187 KB (78% smaller)</span>\n                    </div>\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Loading:</span>\n                      <span className=\"metric-value highlight\">Lazy + Progressive</span>\n                    </div>\n                    <div className=\"metric\">\n                      <span className=\"metric-label\">Quality:</span>\n                      <span className=\"metric-value highlight\">Network-aware</span>\n                    </div>\n                  </div>\n                  <div className=\"image-container\">\n                    <OptimizedImage \n                      src=\"/assets/sample/optimized-image.jpg\" \n                      alt=\"Optimized mountain landscape\" \n                      width={600}\n                      height={400}\n                      priority={false}\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"optimization-explanation\">\n                <h4>Image Optimization Benefits</h4>\n                <p>\n                  The optimized image uses modern techniques to load faster and provide a better user experience:\n                </p>\n                <ul>\n                  <li>Reduced data usage by 78% (essential for mobile users)</li>\n                  <li>Progressive loading shows a preview while the full image loads</li>\n                  <li>Automatically selects the best format based on browser support</li>\n                  <li>Adjusts quality based on network conditions</li>\n                </ul>\n                <p>\n                  This approach dramatically improves page loading time and Core Web Vitals metrics,\n                  particularly Largest Contentful Paint (LCP) and Cumulative Layout Shift (CLS).\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </motion.section>\n  );\n};\n\nexport default PerformanceOptimizations; "],"names":["lighthouseScores","PerformanceMetrics","expanded","setExpanded","useState","activeTab","setActiveTab","getScoreColor","score","containerVariants","hidden","opacity","y","visible","transition","duration","staggerChildren","itemVariants","x","renderCircularProgress","label","_jsxs","motion","div","className","variants","children","width","height","viewBox","_jsx","cx","cy","r","fill","stroke","strokeWidth","strokeDasharray","concat","Math","PI","strokeDashoffset","strokeLinecap","transform","fontFamily","fontSize","textAnchor","initial","animate","onClick","rotate","Date","toLocaleDateString","HeavyComponent1","lazy","Promise","resolve","setTimeout","HeavyComponent2","HeavyComponent3","LoadingSkeleton","CodeSplittingDemo","loadedComponents","setLoadedComponents","bundleData","toggleComponent","id","includes","filter","cid","Suspense","fallback","length","_ref","src","alt","sizes","priority","rest","_objectWithoutProperties","_excluded","isLoaded","setIsLoaded","isVisible","setIsVisible","effectiveConnection","setEffectiveConnection","imageRef","useRef","useEffect","navigator","connection","effectiveType","handleNetworkChange","addEventListener","removeEventListener","current","currentRef","observer","IntersectionObserver","entries","isIntersecting","disconnect","rootMargin","threshold","observe","getExtension","path","parts","split","pop","toLowerCase","basePath","extension","slice","getBasePath","originalExtension","qualityParam","getQualityParam","getSrcSet","format","map","dpr","join","placeholderStyle","paddingBottom","_objectSpread","ref","style","aspectRatio","type","srcSet","loading","onLoad","process","PerformanceOptimizations","section","OptimizedImage"],"sourceRoot":""}